# Run rhel-8 unit tests in a PR triggered by a "/test [...]" comment from an organization member.
# This avoids running untrusted and unreviewed code on self-hosted runners and with R/W permission and ability to read secrets.
# See https://securitylab.github.com/research/github-actions-preventing-pwn-requests
name: Run validation tests for external contributors
on:
  issue_comment:
    types: [created]

jobs:
  pr-info:
    if: startsWith(github.event.comment.body, '/test')
    runs-on: ubuntu-latest
    steps:
      - name: Query author repository permissions
        uses: octokit/request-action@v2.x
        id: user_permission
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.event.sender.login }}/permission
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # restrict running of tests to users with admin or write permission for the repository
      # see https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#get-repository-permissions-for-a-user
      # store output if user is allowed in allowed_user job output so it has to be checked in downstream job
      - name: Check if user does have correct permissions
        if: contains('admin write', fromJson(steps.user_permission.outputs.data).permission)
        id: check_user_perm
        run: |
          echo "User '${{ github.event.sender.login }}' has permission '${{ fromJson(steps.user_permission.outputs.data).permission }}' allowed values: 'admin', 'write'"
          echo "::set-output name=allowed_user::true"

      - name: Get information for pull request
        uses: octokit/request-action@v2.x
        id: pr_api
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if branch allows running tests
        id: check_target_branch
        run: |
          TARGET=${{ fromJson(steps.pr_api.outputs.data).base.ref }}
          [[ $TARGET =~ (master|f34-(devel|release)) ]] && echo "::set-output name=allowed_ref::true"

    outputs:
      allowed_user: ${{ steps.check_user_perm.outputs.allowed_user }}
      allowed_ref: ${{ steps.check_target_branch.outputs.allowed_ref }}
      base_ref: ${{ fromJson(steps.pr_api.outputs.data).base.ref }}
      sha: ${{ fromJson(steps.pr_api.outputs.data).head.sha }}

  unit-tests:
    needs: pr-info
    if: needs.pr-info.outputs.allowed_ref == 'true' && needs.pr-info.outputs.allowed_user == 'true'
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
        # * Don't forget to copypaste also the same matrix below in rpm tests!
        # * Replace current branch in "release" with empty string. This makes name of the check for
        #   the current branch always have the same name, so that it can be added to required
        #   checks.
        # * For various branches, comment out what does not apply:
        #     on -devel, run everything
        #     on -release, only -release
        #     on master, only master and ELN
        release: [master, eln, '', f34-release]
        include:
          - release: master
            target_branch: 'master'
            ci_tag: 'master'
          - release: eln
            target_branch: 'master'
            ci_tag: 'eln'
            build-args: '--build-arg=image=quay.io/fedoraci/fedora:eln-x86_64'
          - release: ''
            target_branch: 'f34-devel'
            ci_tag: 'f34-devel'
          - release: f34-release
            target_branch: 'f34-release'
            ci_tag: 'f34-release'
    env:
      CI_TAG: '${{ matrix.ci_tag }}'
      CONTAINER_BUILD_ARGS: '${{ matrix.build-args }}'
      STATUS_NAME: 'unit-tests (${{ matrix.release }})'
      TARGET_BRANCH_NAME: 'origin/${{ matrix.target_branch }}'

    steps:
      # we post statuses manually as this does not run from a pull_request event
      # https://developer.github.com/v3/repos/statuses/#create-a-status
      - name: Create in-progress status
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: ${{ env.STATUS_NAME }}
          state: pending
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          # otherwise we are testing target branch instead of the PR branch (see pull_request_target trigger)
          ref: ${{ needs.pr-info.outputs.sha }}
          fetch-depth: 0

      - name: Rebase to current ${{ env.TARGET_BRANCH_NAME }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 ${{ env.TARGET_BRANCH_NAME }}
          git rebase ${{ env.TARGET_BRANCH_NAME }}

      - name: Check if rebuild of the container image is required
        id: check-dockerfile-changed
        run: |
          changes=$(git diff ${{ env.TARGET_BRANCH_NAME }}..HEAD -- dockerfile/anaconda-ci/ anaconda.spec.in scripts/testing/install_dependencies.sh)
          # print for debugging
          echo "$changes"
          [ -z "$changes" ] || echo "::set-output name=changed::true"

      # build container if files for dockerfile changed in the PR
      - name: Build anaconda-ci container
        # FIXME: always build ELN container, until we publish it to quay.io
        if: steps.check-dockerfile-changed.outputs.changed || matrix.release == 'eln'
        run: make -f Makefile.am anaconda-ci-build

      - name: Run tests in anaconda-ci container
        run: |
          # put the log in the output, where it's easy to read and link to
          make -f Makefile.am container-ci || { cat test-logs/test-suite.log; exit 1; }

      - name: Upload test and coverage logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs (${{ matrix.release }})'
          path: test-logs/*

      - name: Set result status
        if: always()
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: ${{ env.STATUS_NAME }}
          state: ${{ job.status }}
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  rpm-tests:
    needs: pr-info
    if: needs.pr-info.outputs.allowed_ref == 'true' && needs.pr-info.outputs.allowed_user == 'true'
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        # For matrix details, see comments for the unit tests above.
        release: [master, eln, '', f34-release]
        include:
          - release: master
            target_branch: 'master'
            ci_tag: 'master'
          - release: eln
            target_branch: 'master'
            ci_tag: 'eln'
            build-args: '--build-arg=image=quay.io/fedoraci/fedora:eln-x86_64'
          - release: ''
            target_branch: 'f34-devel'
            ci_tag: 'f34-devel'
          - release: f34-release
            target_branch: 'f34-release'
            ci_tag: 'f34-release'
    env:
      CI_TAG: '${{ matrix.ci_tag }}'
      CONTAINER_BUILD_ARGS: '${{ matrix.build-args }}'
      STATUS_NAME: 'rpm-tests (${{ matrix.release }})'
      TARGET_BRANCH_NAME: 'origin/${{ matrix.target_branch }}'

    steps:
      - name: Create in-progress status
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: ${{ env.STATUS_NAME }}
          state: pending
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          # otherwise we are testing target branch instead of the PR branch (see pull_request_target trigger)
          ref: ${{ needs.pr-info.outputs.sha }}
          fetch-depth: 0

      - name: Rebase to current ${{ env.TARGET_BRANCH_NAME }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 ${{ env.TARGET_BRANCH_NAME }}
          git rebase ${{ env.TARGET_BRANCH_NAME }}

      - name: Build RPM test container
        run: make -f Makefile.am anaconda-rpm-build

      - name: Run RPM tests in container
        run: make -f Makefile.am container-rpm-test

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs-rpm-test (${{ matrix.release }})'
          path: test-logs/*

      - name: Set result status
        if: always()
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: ${{ env.STATUS_NAME }}
          state: ${{ job.status }}
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  unit-tests-rhel-8:
    needs: pr-info
    if: needs.pr-info.outputs.base_ref == 'rhel-8' && needs.pr-info.outputs.allowed_user == 'true'
    runs-on: [self-hosted, ci-tasks, rhel-8]
    timeout-minutes: 30
    env:
      TARGET_BRANCH_NAME: origin/rhel-8
      STATUS_NAME: unit-tests
    steps:
      # we post statuses manually as this does not run from a pull_request event
      # https://developer.github.com/v3/repos/statuses/#create-a-status
      - name: Create in-progress status
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: ${{ env.STATUS_NAME }}
          state: pending
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.pr-info.outputs.sha }}
          fetch-depth: 0

      - name: Rebase to current rhel-8
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 ${{ env.TARGET_BRANCH_NAME }}
          git rebase ${{ env.TARGET_BRANCH_NAME }}

      - name: Run test
        run: |
          ./autogen.sh
          ./configure
          make
          # put the log in the output, where it's easy to read and link to
          make ci || { cat test-logs/test-suite.log; exit 1; }

      - name: Upload test and coverage logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: test-logs/*

      - name: Set result status
        if: always()
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: ${{ env.STATUS_NAME }}
          state: ${{ job.status }}
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  rpm-tests-rhel-8:
    needs: pr-info
    if: needs.pr-info.outputs.base_ref == 'rhel-8' && needs.pr-info.outputs.allowed_user == 'true'
    runs-on: [self-hosted, kstest]
    timeout-minutes: 30
    env:
      TARGET_BRANCH_NAME: origin/rhel-8
      STATUS_NAME: rpm-tests
    steps:
      - name: Create in-progress status
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: ${{ env.STATUS_NAME }}
          state: pending
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.pr-info.outputs.sha }}
          fetch-depth: 0

      - name: Rebase to current ${{ env.TARGET_BRANCH_NAME }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 ${{ env.TARGET_BRANCH_NAME }}
          git rebase ${{ env.TARGET_BRANCH_NAME }}

      - name: Build RPM test container
        run: make -f Makefile.am anaconda-rpm-build

      - name: Run RPM tests in container
        run: make -f Makefile.am container-rpm-test

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs-rpm-test'
          path: test-logs/*

      - name: Set result status
        if: always()
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: ${{ env.STATUS_NAME }}
          state: ${{ job.status }}
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
