# Build a boot.iso from a PR triggered by a "/boot-iso" comment or manually.
name: Build boot.iso
on:
  issue_comment:
    types: [created]
  # be able to start this action manually from a actions tab when needed
  workflow_dispatch:

permissions:
  contents: read
  statuses: write

jobs:
  pr-info:
    if: github.event_name == 'workflow_dispatch' || startsWith(github.event.comment.body, '/boot-iso')
    runs-on: ubuntu-latest
    steps:
      - name: Query comment author repository permissions
        if: github.event_name != 'workflow_dispatch'
        uses: octokit/request-action@v2.x
        id: user_permission
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.event.sender.login }}/permission
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # restrict this workflow to users with admin or write permission for the repository
      # see https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#get-repository-permissions-for-a-user
      # store output if user is allowed in allowed_user job output so it has to be checked in downstream job
      - name: Check if user does have correct permissions
        if: github.event_name != 'workflow_dispatch' && contains('admin write', fromJson(steps.user_permission.outputs.data).permission)
        id: check_user_perm
        run: |
          echo "User '${{ github.event.sender.login }}' has permission '${{ fromJson(steps.user_permission.outputs.data).permission }}' allowed values: 'admin', 'write'"
          echo "::set-output name=allowed_user::true"

      - name: Get information for pull request
        if: github.event_name != 'workflow_dispatch'
        uses: octokit/request-action@v2.x
        id: pr_api
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set outputs
        id: set_outputs
        run: |
          set -eux

          echo "${{ steps.pr_api.outcome }}"

          if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
            echo "::set-output name=allowed_user::true"
            echo "::set-output name=sha::$GITHUB_SHA"
          else
            echo "::set-output name=allow_user::${{ steps.check_user_perm.outcome == 'success' && steps.check_user_perm.outputs.allowed_user }}"
            echo "::set-output name=sha::${{ steps.pr_api.outcome == 'success' && fromJson(steps.pr_api.outputs.data).head.sha }}"
          fi

    outputs:
      allowed_user: ${{ steps.set_outputs.outputs.allowed_user }}
      sha: ${{ steps.set_outputs.outputs.sha }}

  run:
    needs: pr-info
    # only do this for Fedora for now; once we have RHEL 8/9 boot.iso builds working, also support these
    if: needs.pr-info.outputs.allowed_user == 'true'
    runs-on: [self-hosted, kstest]
    timeout-minutes: 300
    env:
       STATUS_NAME: boot-iso
       CONTAINER_TAG: 'lorax'
       ISO_BUILD_CONTAINER_NAME: 'quay.io/rhinstaller/anaconda-iso-creator'
    steps:
      # we post statuses manually as this does not run from a pull_request event
      # https://developer.github.com/v3/repos/statuses/#create-a-status
      - name: Create in-progress status
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: '${{ env.STATUS_NAME }} ${{ needs.pr-info.outputs.launch_args }}'
          state: pending
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.pr-info.outputs.sha }}
          fetch-depth: 0

      - name: Build anaconda-iso-creator container image
        run: |
          # set static tag to avoid complications when looking what tag is used
          sudo make -f ./Makefile.am anaconda-iso-creator-build CI_TAG=$CONTAINER_TAG

      - name: Build anaconda-rpm container (for RPM build)
        run: |
          # set static tag to avoid complications when looking what tag is used
          make -f ./Makefile.am anaconda-rpm-build CI_TAG=$CONTAINER_TAG

      - name: Build Anaconda RPM files
        run: |
          # output of the build will be stored in ./result/build/01-rpm-build/*.rpm
          make -f ./Makefile.am container-rpms-scratch CI_TAG=$CONTAINER_TAG
          mkdir -p ./anaconda_rpms/
          cp -av ./result/build/01-rpm-build/*.rpm ./anaconda_rpms/

      - name: Prepare environment for lorax run
        run: |
          mkdir -p images
          # We have to pre-create loop devices because they are not namespaced in kernel so
          # podman can't access newly created ones. That caused failures of tests when runners
          # were rebooted.
          sudo mknod -m 0660 /dev/loop0 b 7 0  2> /dev/null || true
          sudo mknod -m 0660 /dev/loop1 b 7 1  2> /dev/null || true

      - name: Build the boot.iso
        run: |
          # /var/tmp tmpfs speeds up lorax and avoids https://bugzilla.redhat.com/show_bug.cgi?id=1906364
          sudo podman run -i --rm --privileged \
            --tmpfs /var/tmp:rw,mode=1777 \
            -v `pwd`/anaconda_rpms:/anaconda-rpms:ro \
            -v `pwd`/images:/images:z \
            $ISO_BUILD_CONTAINER_NAME:$CONTAINER_TAG

      - name: Collect logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: 'logs'
          path: |
           images/*.log

      - name: Upload image artifacts
        uses: actions/upload-artifact@v3
        with:
          name: images
          path: |
            images/boot.iso

      - name: Set result status
        if: always()
        uses: octokit/request-action@v2.x
        with:
          route: 'POST /repos/${{ github.repository }}/statuses/${{ needs.pr-info.outputs.sha }}'
          context: '${{ env.STATUS_NAME }} ${{ needs.pr-info.outputs.launch_args }}'
          state: ${{ job.status }}
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
